package leetcode.array.hard.java_solutions;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class CountSubarraysWithFixedBounds_2444 {

    static class SolutionQueue {
        public long countSubarrays(int[] nums, int minK, int maxK) {
            Queue<Integer> queue = new LinkedList<>();
            int minElementIndex = -1;
            int maxElementIndex = -1;
            long counter = 0L;
            for (int num : nums) {
                if (num <= maxK && num >= minK) {
                    queue.add(num);
                    if (num == minK) minElementIndex = queue.size();
                    if (num == maxK) maxElementIndex = queue.size();
                    if (minElementIndex != -1 && maxElementIndex != -1) {
                        counter += Math.min(minElementIndex, maxElementIndex);
                    }
                } else {
                    queue.clear();
                    minElementIndex = -1;
                    maxElementIndex = -1;
                }
            }
            return counter;
        }
    }

    static class Solution {
        public long countSubarrays(int[] nums, int minK, int maxK) {
            long counter = 0, badIdx = -1, minIdx = -1, maxIdx = -1, n = nums.length;
            for (int i = 0; i < n; i++) {
                if (nums[i] < minK || nums[i] > maxK) badIdx = i;
                if (nums[i] == minK) minIdx = i;
                if (nums[i] == maxK) maxIdx = i;
                counter += Math.max(0L, Math.min(minIdx, maxIdx) - badIdx);
            }
            return counter;
        }
    }

    static class SolutionBruteForce {
        private int minK = 0;
        private int maxK = 0;

        public long countSubarrays(int[] nums, int minK, int maxK) {
            this.minK = minK;
            this.maxK = maxK;
            var list = new ArrayList<List<Integer>>();
            collectSubarrays(list, nums);
            return list.stream().filter(this::isSubarrayValid).count();
        }

        private void collectSubarrays(List<List<Integer>> list, int[] nums) {
            for (int i = 0; i < nums.length; i++) {
                var current = new ArrayList<Integer>();
                current.add(nums[i]);
                list.add(new ArrayList<>(current));
                for (int j = i + 1; j < nums.length; j++) {
                    current.add(nums[j]);
                    list.add(new ArrayList<>(current));
                }
            }
        }

        private boolean isSubarrayValid(List<Integer> list) {
            var min = Integer.MAX_VALUE;
            var max = Integer.MIN_VALUE;

            for (int num : list) {
                min = Math.min(min, num);
                max = Math.max(max, num);
            }
            return min == minK && max == maxK;
        }

        public static void main(String[] args) {
            long result = new SolutionBruteForce().countSubarrays(new int[]{643729, 396086, 951105, 951105, 779859, 619062, 501467, 951105, 34311, 951105, 34311, 970948, 34311, 34311, 355476, 34311, 710028, 994248, 951105, 951105, 101963, 957473, 722183, 34311, 951105, 63664, 951105, 951105, 52887, 329603, 951105, 34311, 151625, 951105, 98413, 221271, 749399, 361594, 855850, 558336, 951105, 34311, 951105, 1375, 951105, 387156, 722411, 34311, 951105, 34311, 871872, 284894, 90317, 799858, 886502, 34311, 752424, 951105, 37631, 198656, 34311, 540630, 672217, 660346, 911012, 34311, 15427, 951105, 34311, 288147, 92907, 155624, 951105, 34311, 698570, 279379, 353471, 836703, 519260, 34311, 951105, 34311, 34311, 847303, 611139, 470231, 238367, 216601, 34311, 441421, 951105, 34311, 519524, 970065, 380383, 150967, 182668, 951105, 951105, 951105, 951105, 175526, 470607, 951105, 677996, 311442, 951105, 214762, 951105, 34311, 951105, 34311, 777862, 486751, 530883, 801854, 951105, 492528, 402731, 951105, 951105, 72458, 951105, 951105, 951105, 34311, 236620, 34311, 429740, 34311, 832252, 34311, 35256, 210198, 337050, 34311, 885240, 755606, 951105, 819364, 233375, 77659, 34311, 316799, 34311, 367979, 951105, 34311, 951105, 922544, 336740, 951105, 34311, 951105, 951105, 34311, 409121, 473573, 483648, 34311, 951105, 921254, 468410, 103691, 34311, 951105, 951105, 899442, 951105, 453003, 787065, 951105, 985519, 951105, 951105, 349077, 34311, 506397, 951105, 464393, 34311, 34311, 212161, 34311, 214738, 951105, 34311, 581431, 566388, 951105, 34311, 934115, 34311, 135378, 734321, 824733, 654862, 746420, 951105, 333827, 951105, 951105, 34311, 31731, 744534, 397766, 951105, 34311, 255924, 34311, 34326, 695321, 402168, 184737, 951105, 320441, 34311, 397671, 5325, 951105, 951105, 100427, 54595, 529981, 951105, 951105, 951105, 625035, 951105, 47314, 832151, 951105, 660481, 208575, 34311, 951105, 492912, 951105, 951105, 107442, 951105, 34311, 702519, 342306, 34311, 34311, 34311, 951105, 951105, 769333, 39303, 34311, 421627, 795194, 210872, 744398, 932072, 277753, 44421, 691837, 34311, 27928, 951105, 951105, 951105, 545774, 951105, 951105, 334534, 285292, 679679, 463799, 520653, 34311, 144725, 34311, 951105, 951105, 34311, 951105, 951105, 34311, 980762, 947801, 951105, 257508, 34311, 216204, 34311, 348534, 951105, 530894, 34311, 951105, 473698, 951105, 473031, 34311, 708026, 951105, 951105, 951105, 323184, 126394, 34311, 784396, 951105, 951105, 951105, 316399, 664271, 34311, 509743, 857247, 82839, 451849, 34311, 40373, 877811, 34311, 498558, 604979, 951105, 34311, 437786, 951105, 182219, 629554, 34311, 34311, 951105, 34311, 617195, 34311, 206956, 951105, 146178, 184334, 34311, 122951, 271189, 931125, 417141, 34311, 6935, 413622, 34311, 951105, 34311, 951105, 34311, 951105, 571151, 15703, 244178, 951105, 34311, 327537, 57830, 399159, 951105, 286188, 249368, 34311, 951105, 34311, 34311, 34311, 926217, 951105, 569251, 34311, 34311, 946104, 951105, 34311, 750914, 855140, 951105, 121062, 951105, 34311, 34311, 951105, 951105, 34311, 373566, 383552, 849181, 53233, 951105, 740240, 951105, 373307, 34311, 951105, 436431, 817728, 669145, 430194, 34311, 951105, 34311, 601928, 473346, 771249, 845644, 951105, 41628, 473973, 2016, 951105, 34311, 34311, 951105, 34311, 848775, 801046, 945048, 629761, 88317, 77447, 943774, 927983, 951105, 951105, 714437, 951105, 951105, 755026, 445710, 951105, 296980, 951105, 276296, 224375, 785804, 951105, 195721, 34311, 951105, 942981, 4850, 236476, 34311, 631181, 409594, 837331, 488118, 951105, 970217, 34311, 897574, 951105, 800565, 951105, 34311, 34311, 34311, 951105, 34311, 34311, 34311, 411318, 853072, 34311, 898205, 932555, 487185, 968884, 34311, 640824, 951105, 34311, 951105, 421163, 198704, 34311, 34311, 951105, 951105, 219162, 951105, 951105, 34311, 34311, 34311, 34311, 846594, 34311, 951105, 899604, 143861, 34311, 34311, 951105, 712546, 165416, 127092, 34311, 38774, 34311, 488818, 951105, 527579, 532784, 34311, 951105, 951105, 34311, 951105, 34311, 34311, 34311, 34311, 951105, 34311, 34311, 150192, 868231, 34311, 192242, 809922, 38473, 504626, 951105, 428994, 951105, 13922, 104508, 809143, 951105, 34311, 85457, 951105, 951105, 176272, 34311, 845702, 224387, 34311, 951105, 951105, 777914, 951105, 148580, 686856, 34311, 800791, 910027, 92217, 406233, 951105, 47439, 786651, 457332, 34311, 951105, 319051, 632711, 34311, 951105, 951105, 482205, 34311, 951105, 34311, 34311, 34311, 34311, 951105, 951105, 742746, 951105, 34311, 742374, 944424, 234375, 34311, 951105, 34311, 422003, 246702, 425335, 34311, 109029, 951105, 939765, 34311, 429049, 894520, 951105, 951105, 206042, 951105, 708136, 405058, 618594, 951105, 389815, 34311, 34311, 951105, 34311, 978037, 867284, 951105, 34311, 780209, 356236, 34311, 34311, 640706, 34311, 648698, 34311, 34311, 53090, 987592, 34311, 321978, 951105, 46861, 951105, 512859, 34311, 951105, 951105, 951105, 333736, 951105, 34311, 828842, 951105, 601704, 34311, 252334, 34311, 34311, 79742, 922169, 356172, 874902, 245179, 34311, 545783, 207905, 34311, 34311, 951105, 308354, 70667, 34311, 951105, 34311, 34311, 460556, 951105, 34311, 951105, 34311, 951105, 951105, 951105, 951105, 951105, 880236, 649183, 439523, 951105, 951105, 951105, 34311, 34311, 951105, 34311, 951105, 171106, 34311, 34311, 34311, 34311, 799963, 951105, 34311, 162528, 401596, 382178, 951105, 34311, 34311, 34311, 951105, 951105, 34311, 649311, 951105, 550974, 951105, 252365, 34311, 34311, 951105, 34311, 951105, 809599, 968150, 900207, 522695, 448278, 411467, 142241, 951105, 951105, 951105, 34311, 951105, 34311, 555788, 816650, 886544, 951105, 855212, 7407, 34311, 951105, 547696, 858480, 359507, 808350, 951105, 951105, 34311, 951105, 34311, 64365, 607772, 531028, 584801, 951105, 34311, 951105, 719832, 289167, 642699, 34311, 951105, 34311, 146549, 778972, 34311, 606584, 535013, 651973, 749992, 704646, 951105, 34311, 34311, 220939, 376468, 203737, 951105, 34311, 34311, 34311, 951105, 951105, 381145, 34311, 951105, 951105, 951105, 951105, 73512, 853402, 34311, 951105, 699539, 225194, 361738, 34311, 557587, 34311, 907479, 951105, 293614, 242238, 132605, 309632, 951105, 951105, 34311, 951105, 523782, 951105, 951105, 992444, 34311, 34311, 951105, 932306, 277846, 7752, 951105, 951105, 951105, 34311, 487884, 34311, 951105, 951105, 34311, 265138, 34311, 654371, 951105, 470776, 34311, 34311, 91280, 34311, 34311, 34311, 951105, 34311, 930559, 951105, 739933, 951105, 34311, 34311, 951105, 294200, 96728, 951105, 856418, 34311, 523580, 951105, 34311, 807948, 951105, 951105, 388469, 34311, 951105, 741507, 951105, 951105, 951105, 217025, 951105, 34311, 34311, 820310, 436746, 951105, 34311, 951105, 454314, 451808, 34311, 471805, 951105, 34311, 906100, 34311, 605213, 641856, 34311, 34311, 882639, 303914, 34311, 765872, 34311, 951105, 34311, 382579, 34311, 380187, 142047, 34311, 34311, 951105, 34311, 174493, 951105, 34311, 550683, 34311, 34311, 34311, 856014, 951105, 977572, 239780, 951105, 602576, 34311, 5128, 34311, 34311, 34311, 951105, 353730, 951105, 975261, 34311, 291225, 34311, 34311, 84363, 739767, 479636, 419125, 237760, 93504, 130977, 454693, 781518, 951105, 45139, 34311, 34311, 380430, 34311, 252031}, 34311, 951105);
            System.out.println(result);
        }
    }
}
